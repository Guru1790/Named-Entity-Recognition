# -*- coding: utf-8 -*-
"""Named Entity Recognition.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10RUeapW3TBGGacxzP2DlOZ-8gOFnM7jz
"""

import pandas as pd
from itertools import chain
from sklearn.model_selection import train_test_split
from keras.preprocessing.sequence import pad_sequences
from keras.utils import to_categorical
import numpy as np
import tensorflow
from tensorflow.keras import Sequential, Model, Input
from tensorflow.keras.layers import LSTM, Embedding, Dense, TimeDistributed, Dropout, Bidirectional
from tensorflow.keras.utils import plot_model
from numpy.random import seed
import spacy
from spacy import displacy

# Set random seeds for reproducibility
seed(1)
tensorflow.random.set_seed(2)

# Load the dataset
data = pd.read_csv('ner_dataset.csv', encoding='unicode_escape')
data.head()

# Function to create token and tag dictionaries
def get_dict_map(data, token_or_tag):
    tok2idx = {}
    idx2tok = {}

    if token_or_tag == 'token':
        vocab = list(set(data['Word'].to_list()))
    else:
        vocab = list(set(data['Tag'].to_list()))

    idx2tok = {idx: tok for idx, tok in enumerate(vocab)}
    tok2idx = {tok: idx for idx, tok in enumerate(vocab)}
    return tok2idx, idx2tok

# Create token and tag mappings
token2idx, idx2token = get_dict_map(data, 'token')
tag2idx, idx2tag = get_dict_map(data, 'tag')

# Map tokens and tags to their respective indices
data['Word_idx'] = data['Word'].map(token2idx)
data['Tag_idx'] = data['Tag'].map(tag2idx)

# Fill missing values
data_fillna = data.ffill(axis=0)

# Group by sentence and aggregate
data_group = data_fillna.groupby(['Sentence #'], as_index=False)[['Word', 'POS', 'Tag', 'Word_idx', 'Tag_idx']].agg(lambda x: list(x))

# Function to prepare padded train, test, and validation sets
def get_pad_train_test_val(data_group, data):
    # Get max token and tag length
    n_token = len(list(set(data['Word'].to_list())))
    n_tag = len(list(set(data['Tag'].to_list())))

    # Pad tokens (X variable)
    tokens = data_group['Word_idx'].tolist()
    maxlen = max([len(s) for s in tokens])
    pad_tokens = pad_sequences(tokens, maxlen=maxlen, dtype='int32', padding='post', value=n_token - 1)

    # Pad tags (y variable) and convert into one-hot encoding
    tags = data_group['Tag_idx'].tolist()
    pad_tags = pad_sequences(tags, maxlen=maxlen, dtype='int32', padding='post', value=tag2idx["O"])
    n_tags = len(tag2idx)
    pad_tags = [to_categorical(i, num_classes=n_tags) for i in pad_tags]

    # Split train, test, and validation set
    tokens_, test_tokens, tags_, test_tags = train_test_split(pad_tokens, pad_tags, test_size=0.1, train_size=0.9, random_state=2020)
    train_tokens, val_tokens, train_tags, val_tags = train_test_split(tokens_, tags_, test_size=0.25, train_size=0.75, random_state=2020)

    print(
        'train_tokens length:', len(train_tokens),
        '\nval_tokens length:', len(val_tokens),
        '\ntest_tokens length:', len(test_tokens),
        '\ntrain_tags length:', len(train_tags),
        '\nval_tags length:', len(val_tags),
        '\ntest_tags length:', len(test_tags),
    )

    return train_tokens, val_tokens, test_tokens, train_tags, val_tags, test_tags

# Prepare the data
train_tokens, val_tokens, test_tokens, train_tags, val_tags, test_tags = get_pad_train_test_val(data_group, data)

# Define the model architecture
input_dim = len(list(set(data['Word'].to_list()))) + 1
output_dim = 64
input_length = max([len(s) for s in data_group['Word_idx'].tolist()])
n_tags = len(tag2idx)

def get_bilstm_lstm_model():
    model = Sequential()

    # Add Embedding layer
    model.add(Embedding(input_dim=input_dim, output_dim=output_dim, input_length=input_length))

    # Add Bidirectional LSTM
    model.add(Bidirectional(LSTM(units=output_dim, return_sequences=True, dropout=0.2, recurrent_dropout=0.2), merge_mode='concat'))

    # Add LSTM
    model.add(LSTM(units=output_dim, return_sequences=True, dropout=0.5, recurrent_dropout=0.5))

    # Add TimeDistributed Layer
    model.add(TimeDistributed(Dense(n_tags, activation="softmax")))

    # Compile model
    model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])
    model.summary()

    return model

# Create model instance
model_bilstm_lstm = get_bilstm_lstm_model()

# Build the model explicitly by calling it on a batch of data with the correct shape
model_bilstm_lstm.build(input_shape=(None, input_length))

# Visualize the model
plot_model(model_bilstm_lstm, show_shapes=True, show_layer_names=True)

# Function to train the model
def train_model(X, y, model):
    loss = list()
    for i in range(25):
        # Fit model for one epoch on this sequence
        hist = model.fit(X, y, batch_size=1000, verbose=1, epochs=1, validation_split=0.2)
        loss.append(hist.history['loss'][0])
    return loss

# Train the model
results = pd.DataFrame()
results['with_add_lstm'] = train_model(np.array(train_tokens), np.array(train_tags), model_bilstm_lstm)

# Named Entity Recognition visualization with spaCy
nlp = spacy.load('en_core_web_sm')
text = nlp('Hi, My name is Aman Kharwal \n I am from India \n I want to work with Google \n Steve Jobs is My Inspiration')
displacy.render(text, style='ent', jupyter=True)

